import React, { useState, useRef, useContext, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import { Audio } from "react-loader-spinner";
import { unstable_getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]";
import { Card, Col, Row, Text } from "@nextui-org/react";
import axios from "axios";
import Layout from "../components/layout";
import { EventsContext } from "../contexts/events";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";

const inter = Inter({ subsets: ["latin"] });

export default function Home(props) {
  console.log("homepage props ", props);
  const [existingEventIds, setExistingEventIds] = useState(
    props.events.map(({ eventId }) => eventId)
  );
  const { events, setEvents } = useContext(EventsContext);
  const [content, setContent] = useState(events);
  const [contentLoading, setContentLoading] = useState(false);
  const [nextContentLoading, setNextContentLoading] = useState(false);
  const [currentZip, setCurrentZip] = useState("10001");
  const [radius, setRadius] = useState("4");

  const nextPage = useRef(null);

  const onRadiusChange = (e) => {
    setRadius(e?.target?.value);
  };

  const onZipChange = (e) => {
    setCurrentZip(e?.target?.value);
  };

  const saveEvent = async (eventInfo) => {
    const saveEventInfo = await axios.post(`/api/events/save`, eventInfo);
    const { eventId } = eventInfo;
    if (saveEventInfo.status === 200) {
      console.log("saveEventInfo.status ", saveEventInfo.status);
      setExistingEventIds([...existingEventIds, eventId]);
    }

    console.log("saveEventInfo  from response", saveEventInfo);
  };

  const getEventsNearby = async (e) => {
    e.preventDefault();
    setContentLoading(true);
    const eventsInfo = await axios.get(
      `/api/events/?zip=${currentZip}&radius=${radius}`
    );
    setContentLoading(false);
    nextPage.current = eventsInfo.data?.nextPage;
    setContent(eventsInfo.data.events);
    setEvents(eventsInfo.data.events);
    console.log("eventsInfo ", eventsInfo);
    return eventsInfo.data.events;
  };

  const getNextEvents = async () => {
    console.log("getNextEvents!!");
    try {
      setNextContentLoading(true);
      const eventsInfo = await axios.get(
        `/api/events/?zip=${currentZip}&radius=${radius}&page=${nextPage.current}`
      );
      setNextContentLoading(false);
      nextPage.current = eventsInfo.data?.nextPage;
      setContent(eventsInfo.data.events);
      console.log("eventsInfo ", eventsInfo);
      setContent([...content, ...eventsInfo.data.events]);
      setEvents([...content, ...eventsInfo.data.events]);
      currentEvents.events = [
        ...currentEvents.events,
        ...eventsInfo.data.events,
      ];
    } catch (err) {
      console.log("error is ", err);
      return {
        props: { err: "There was an error" },
      };
    }
  };

  if (contentLoading)
    return (
      <>
        <Head>
          <title>Find Events Near Me</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Layout className={styles.main}>
          <div
            style={{
              width: "100%",
              display: "flex",
              justifyContent: "center",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <form onSubmit={getEventsNearby} style={{ marginBottom: "25px" }}>
              <div style={{ marginBottom: "15px" }}>
                {" "}
                <label>
                  <span style={{ width: "80px", display: "inline-block" }}>
                    Zip Code:
                  </span>
                  <input
                    placeholder="5"
                    type="text"
                    name="name"
                    onChange={onZipChange}
                    value={currentZip}
                  />
                </label>
              </div>
              <div>
                <label>
                  <span style={{ width: "80px", display: "inline-block" }}>
                    {" "}
                    Radius:{" "}
                  </span>
                  <input
                    type="text"
                    name="radius"
                    onChange={onRadiusChange}
                    value={radius}
                  />
                </label>
                <input
                  type="submit"
                  value="Get Events"
                  style={{ cursor: "pointer", marginLeft: "10px" }}
                />
              </div>
            </form>
          </div>

          <Audio
            height="80"
            width="80"
            radius="9"
            color="green"
            ariaLabel="loading"
            wrapperStyle
            wrapperClass
          />
        </Layout>
      </>
    );

  return (
    <>
      <Head>
        <title>Find Events Near Me</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout className={styles.main}>
        <div
          style={{
            width: "100%",
            display: "flex",
            justifyContent: "center",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <form onSubmit={getEventsNearby} style={{ marginBottom: "25px" }}>
            <div style={{ marginBottom: "15px" }}>
              {" "}
              <label>
                <span style={{ width: "80px", display: "inline-block" }}>
                  Zip Code:
                </span>
                <input
                  placeholder="5"
                  type="text"
                  name="name"
                  onChange={onZipChange}
                  value={currentZip}
                />
              </label>
            </div>
            <div>
              <label>
                <span style={{ width: "80px", display: "inline-block" }}>
                  {" "}
                  Radius:{" "}
                </span>
                <input
                  type="text"
                  name="radius"
                  onChange={onRadiusChange}
                  value={radius}
                />
              </label>
              <input
                type="submit"
                value="Get Events"
                style={{ cursor: "pointer", marginLeft: "10px" }}
              />
            </div>
          </form>
        </div>

        <div className={styles.grid}>
          {content.map((localEvent, idx) => {
            const {
              name,
              distance,
              images,
              url,
              dates,
              _embedded: embeddedInfo,
              id,
            } = localEvent;
            const alreadyHas = existingEventIds.includes(id);
            console.log(
              "dateTime is ",
              dates?.start.dateTime,
              "for timezon ",
              dates?.timezone
            );
            const eventDate = dates.start.noSpecificTime
              ? new Date(dates?.start.localDate).toLocaleDateString("en-us", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                  weekday: "long",
                  timeZone: dates.timezone,
                })
              : new Date(dates?.start.dateTime).toLocaleDateString("en-us", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                  weekday: "long",
                  timeZone: dates.timezone,
                  hour: "2-digit",
                  minute: "2-digit",
                });

            const mobileImageUrl = images.find(
              ({ ratio }) => ratio === "3_2"
            ).url;
            return (
              <Card
                isPressable
                css={{ marginBottom: "20px" }}
                onPress={() => console.log("pressed!")}
                key={id}
              >
                <Card.Body css={{ p: 0 }}>
                  <Card.Image
                    src={images[4].url}
                    srcSet={`${mobileImageUrl} 500w`}
                    objectFit="cover"
                    width="100%"
                    height={340}
                    alt={images[0].title}
                  />
                </Card.Body>
                <Card.Body
                  css={{ justifyItems: "flex-start", minHeight: "210px" }}
                >
                  <Col wrap="wrap" justify="space-between" align="center">
                    <Text
                      h2
                      size={12}
                      weight="bold"
                      transform="uppercase"
                      color="black"
                      css={{ fontSize: "18px" }}
                    >
                      {name} at {embeddedInfo.venues?.[0].name}
                    </Text>
                    <Text h3 color="black" css={{ fontSize: "14px" }}>
                      {distance} miles away
                    </Text>
                    <Text h4 color="black" css={{ fontSize: "14px" }}>
                      On {eventDate}
                    </Text>
                  </Col>
                </Card.Body>
                <Card.Footer
                  css={{
                    display: "flex",
                    justifyContent: "space-between",
                  }}
                >
                  <Text
                    h3
                    color="black"
                    css={{
                      fontSize: "14px",
                    }}
                  >
                    <a
                      href={url}
                      target="_blank"
                      onClick={(e) => e.stopPropagation()}
                    >
                      Learn More
                    </a>
                  </Text>
                  {!alreadyHas ? (
                    <div
                      className={styles.circle}
                      onClick={() =>
                        saveEvent({
                          name,
                          distance,
                          images,
                          url,
                          dates,
                          embeddedInfo,
                          eventId: id,
                        })
                      }
                    ></div>
                  ) : (
                    <div style={{ color: "green", fontStyle: "italic" }}>
                      You have saved this event
                    </div>
                  )}
                </Card.Footer>
              </Card>
            );
          })}
        </div>
        <div
          style={{
            width: "100%",
            textAlign: "center",
          }}
        >
          {!!content.length && (
            <button
              style={{
                fontSize: "20px",
                borderRadius: "5px",
                color: "black",
                width: "200px",
                height: "50px",
                backgroundColor: "#90e0ef",
                borderColor: "grey",
                margin: "20px auto",
                cursor: "pointer",
              }}
              onClick={() => getNextEvents()}
              disabled={!nextPage.current}
            >
              See more events
            </button>
          )}
        </div>
        {nextContentLoading && (
          <Audio
            height="80"
            width="80"
            radius="9"
            color="green"
            ariaLabel="loading"
            wrapperStyle
            wrapperClass
          />
        )}
      </Layout>
    </>
  );
}

export async function getServerSideProps(context) {
  // const session = await unstable_getServerSession(
  //   context.req,
  //   context.res,
  //   authOptions
  // );

  // const userEvents = await axios.get(
  //   `http://localhost:3000/api/events/user/${session?.user.email}`
  // );
  // pass the email to grab all of the events for the current user or an empty array if not logged in
  return {
    props: {
      events: [],
    },
  };
}
